{"version":3,"sources":["Recorder.js","App.js","serviceWorker.js","index.js"],"names":["Recorder","props","mimeType","mediaChunks","mediaStream","recorder","blob","createNewRecorder","window","MediaRecorder","ondataavailable","evt","console","log","data","push","onstart","onRecordStart","Promise","resolve","reject","onstop","onerror","event","name","then","saveMediaBlob","onRecordStop","record","start","stopRecord","stop","Blob","type","e","error","audioBlob","setState","URL","createObjectURL","onReset","state","this","mediaChecks","hasUserMedia","Error","hasAudioVideoDevices","navigator","mediaDevices","getUserMedia","audio","mimeSupported","filter","isTypeSupported","hasAudio","hasVideo","enumerateDevices","devices","forEach","device","kind","onClick","controls","src","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fb9d5e5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Recorder extends React.Component {\n  mimeType = { 'type': 'audio/wav' };\n  mediaChunks = []\n  mediaStream = null\n  recorder = null\n  blob = null\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      audioBlob: null\n    }\n  }\n\n  componentDidMount() {\n    this.mediaChecks()\n  }\n\n  async mediaChecks() {\n    if (!this.hasUserMedia()) throw new Error('Navigator does not support video media record.')\n    if (!await this.hasAudioVideoDevices()) throw new Error('Not audio/video input devices detected.')\n    this.mediaStream = await window.navigator.mediaDevices.getUserMedia({ audio: true })\n    this.recorder = this.createNewRecorder(this.mediaStream)\n    const mimeSupported = ['audio/wav', 'audio/mpeg', 'audio/webm', 'audio/ogg'].filter(MediaRecorder.isTypeSupported)\n    this.mimeType = mimeSupported[0]\n  }\n\n  hasUserMedia() {\n    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)\n  }\n\n  hasAudioVideoDevices() {\n    // TODO: only ask for what is needed\n    let hasAudio = false\n    let hasVideo = false\n    return navigator.mediaDevices.enumerateDevices()\n      .then(devices => {\n        devices.forEach(device => {\n          if (device.kind === 'audioinput') hasAudio = true\n          if (device.kind === 'videoinput') hasVideo = true\n        })\n        return (hasAudio && hasVideo)\n      })\n  }\n\n  createNewRecorder = (mediaStream) => {\n    const recorder = new window.MediaRecorder(mediaStream)\n    recorder.ondataavailable = evt => {\n      console.log(\"Pushing...\", evt.data)\n      this.mediaChunks.push(evt.data)\n      console.log(\"Media Chunks...\", this.mediaChunks)\n    }\n    recorder.onstart = this.onRecordStart\n    const stopped = new Promise((resolve, reject) => {\n      recorder.onstop = evt => {\n        console.log(\"stopping\")\n        resolve()\n      }\n      recorder.onerror = event => reject(event.name)\n    })\n    stopped\n      .then(this.saveMediaBlob)\n      .then(this.onRecordStop)\n    return recorder\n  }\n\n  record = () => this.recorder.start()\n\n  stopRecord = () => this.recorder.stop()\n\n  onRecordStart = () => console.log(\"Starting Recording\")\n\n  saveMediaBlob = () => {\n    try {\n      return new window.Blob(this.mediaChunks, { type: this.mimeType })\n    } catch (e) {\n      console.error('Error generating file:', e)\n    }\n\n  }\n\n  onRecordStop = (audioBlob) => {\n    this.blob = audioBlob\n    this.setState({ audioBlob: URL.createObjectURL(audioBlob) })\n  }\n\n  onReset = () => {\n    console.log(\"Resetting...\")\n    this.mediaChunks = []\n    this.blob = null\n    this.recorder = this.createNewRecorder(this.mediaStream)\n    this.setState({ audioBlob: null })\n  }\n\n  render() {\n    return <div>\n      <button onClick={this.record}>Record</button>\n      {\n        this.state.audioBlob ?\n          <button onClick={this.onReset}>Reset</button> :\n          <button onClick={this.stopRecord}>Stop</button>\n      }\n\n      {\n        this.state.audioBlob &&\n        <article>\n          <audio controls src={this.state.audioBlob} />\n        </article>\n      }\n    </div>\n  }\n}\n","import React from 'react'\nimport './App.css';\nimport Recorder from './Recorder';\n\n// var mediaRecorder;\n// var chunks = [];\n\n// const recordOnClick = () => {\n//   mediaRecorder.start();\n//   console.log(mediaRecorder.state);\n//   console.log(\"recorder started\");\n// }\n// const stopRecordOnclick = () => {\n//   mediaRecorder.stop();\n//   console.log(mediaRecorder.state);\n//   console.log(\"recorder stopped\");\n// }\n\n// const onStopRecordingEvent = setNextAudio => e => {\n//   console.log(e)\n//   var blob = new Blob(chunks, { 'type': 'audio/ogg; codecs=opus' });\n//   chunks = [];\n//   var audioURL = window.URL.createObjectURL(blob);\n//   // console.log(audioURL)\n//   setNextAudio(audioURL);\n//   // audio.src = audioURL;\n\n//   // deleteButton.onclick = function(e) {\n//   //   var evtTgt = e.target;\n//   //   evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n//   // }\n// }\n\nfunction App() {\n  // const [audioSrc, setNextAudio] = useState()\n  // useEffect(() => { console.log(\"Changed audioArc\") }, [audioSrc]);\n  // useEffect(() => {\n  //   if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n  //     console.log('getUserMedia not supported on your browser!');\n  //   }\n\n  //   console.log('getUserMedia supported.');\n  //   navigator.mediaDevices.getUserMedia(\n  //     // constraints - only audio needed for this app\n  //     {\n  //       audio: true\n  //     })\n\n  //     // Success callback\n  //     .then(function (stream) {\n  //       console.log(\"Created Media Stream\", stream)\n  //       mediaRecorder = new window.MediaRecorder(stream);\n  //       console.log(mediaRecorder);\n  //       mediaRecorder.ondataavailable = e => {\n  //         if (e.data && e.data.size > 0) {\n  //           chunks.push(e.data)\n  //         }\n  //       };\n  //       mediaRecorder.onStart = function(e) { console.log(\"Starting recording :)\", e) }\n  //       mediaRecorder.onStop = onStopRecordingEvent(setNextAudio)\n  //     })\n\n  //     // Error callback\n  //     .catch(function (err) {\n  //       console.log('The following getUserMedia error occured: ' + err);\n  //     }\n  //     );\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Record Audio\n      </header>\n      <Recorder />\n      {/* <button onClick={recordOnClick}>Record</button>\n      <button onClick={stopRecordOnclick}>Stop</button>\n      {\n        audioSrc && (\n          <article>\n            <audio controls={\"\"} src={audioSrc} />\n          </article>\n        )\n      } */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}